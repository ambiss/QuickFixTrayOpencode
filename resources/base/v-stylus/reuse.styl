// ---- reuse variables and mixins in all website

//  Variables 

// end Variables

// ----


//  Mixins 

/* use - sample
 *  input
 *       +placeholder()
 *          color #333
 */

placeholder()
    &::-webkit-input-placeholder
        {block}
    &:-moz-placeholder
        {block}
    &::-moz-placeholder
        {block}
    &:-ms-input-placeholder
        {block}


// functions return width and respective height of images JAVASCRIPT API - deeper mixin
/* use mixin
 * div#page
 *   h2
 *     back('img/goomba.png', 'replacement')
 */
 
w(img)
    width image-size(img)[0]
h(img)
    height image-size(img)[1]

sback(img, r=false)
    background url(img) no-repeat 0 0
    w(img)
    h(img)
    if r == true || r=='replacement' || r == replacement
        text-indent -9999em

//----------- display  ----
d(d=inline-block, va=top) 
    display d
    
    if d != block and d != table 
        vertical-align va
    if d == middle 
        display inline-block
        vertical-align middle
    if d == top 
        display inline-block
        vertical-align top
    if d == bottom 
        display inline-block
        vertical-align bottom
    if d == left 
        display block
        float d
    if d == right 
        display block
        float d
    if d == center 
        display block
        margin 0 auto 0

//----------- effects - animates  ----
transition(property=all, duration=0.3s, effect=ease-in-out) 
	-webkit-transition property duration effect
	-moz-transition property duration effect
	-ms-transition property duration effect
	transition property duration effect

user-select(value=none) 
    -webkit-user-select value  
    -moz-user-select value     
    -ms-user-select value     
    user-select value  

//----------- command elements Y and X  ----
ccX(value=-50%) 
    -webkit-transform translateX(value)
    -moz-transform translateX(value)
    -ms-transform translateX(value)
    transform translateX(value)

ccY(value=-50%) 
    -webkit-transform translateY(value)
    -moz-transform translateY(value)
    -ms-transform translateY(value)
    transform translateY(value)

translate(value=0, value-second=0) 
    -webkit-transform translate(value, value-second)
    -moz-transform translate(value, value-second)
    -ms-transform translate(value, value-second)
    transform translate(value, value-second)

tY(value=100%) 
    -webkit-transform translateY(value)
    -moz-transform translateY(value)
    -ms-transform translateY(value)
    transform translateY(value)

tX(value=100%) 
    -webkit-transform translateX(value)
    -moz-transform translateX(value)
    -ms-transform translateX(value)
    transform translateX(value)

font(size=12px, weight=400, family=helvetica, line-height=1.1) 
    font-size size
    font-weight weight
    font-family family
    line-height line-height


// -- Size -- Adjustment -- Position
//------------ Size  ----
size(w=auto, h=auto, type=false) 
    if type == minw 
        min-width w
        height h
    else if type == minh 
        width w
        min-height h
    else if type == minwh 
        min-width w
        min-height h
    else 
        width w
        height h    
    
sizeExtend(width=inherit, height=inherit) 
    width w
    height h
//end -------- Size  ----

z(layer=20, set=false) 
    if layer == quite 
        z-index 9999
    else if layer == full or layer == max or layer == maximo 
        z-index 999
    else if layer == medium or layer == medio 
        z-index 99
    else if layer == bit or layer == pouco 
        z-index 10
    else if set == set or set == relative or set == true 
        position relative
    else if set == absolute 
        position absolute
    else 
        z-index  layer
//end -------- Adjustment layer  ----
    
//----------- Margin  ----
margin(arg, auto=false) 
    if auto == true or auto == auto 
        margin 0 auto 0
    else 
        margin arg
    
//end -------- Margin  ----


// Mixin texts 

//---------- format texts  ---
t(type=center)
    if type == nowrap
    	white-space type
    if type == wsnormal
    	white-space normal
    if type == normal or type == no
    	text-decoration none
    if type == underline or type == overline or type == none
    	text-decoration type
    if type == left or type == right or type == center or type == justify
        text-align type
    if type == uppercase or type == lowercase or type == capitalize or type == inherit
        text-transform type
    if type == line-through or type == depor or type == de-por or type == oferta or type == offer 
    	text-decoration line-through
    
//end -------- format texts t universal ----

// Mixins Decorates
//----------- Backgrounds  ----
 back(path, color=transparent, repeat=no-repeat, position=0 0) 
    background color url(path) repeat position

 backimg(path) 
    background-image url(path)

 backcolor(c=#fff) 
    background-color c

 transparent(c=transparent) 
    background-color c

 backreplace(path, width=auto, height=auto, imgRpl=false) 
    background-image url(path)
    background-repeat no-repeat
    width width
    height height
    
    if imgRpl == true 
        text-indent -999em
    
//end -------- Backgrounds  ----

outline(color=#333, size=1px, style=solid) 
    outline size style color

//----------- Borders  ----
border(color=#333, size=1px, style=solid) 
    border size style color

border-top(color=#333, size=1px, style=solid) 
    border-top size style color

border-right(color=#333, size=1px, style=solid) 
    border-right size style color

border-bottom(color=#333, size=1px, style=solid) 
    border-bottom size style color

border-left(color=#333, size=1px, style=solid) 
    border-left size style color

border-transparent(size=1px) 
    border size solid transparent
 
border-t-transparent(size=1px) 
    border-top size solid transparent
 
border-r-transparent(size=1px) 
    border-right size solid transparent
 
border-b-transparent(size=1px) 
    border-bottom size solid transparent
 
border-l-transparent(size=1px) 
    border-left size solid transparent
 
border-tb-transparent(size=1px) 
    border-top size solid transparent
    border-bottom size solid transparent
 
border-side-transparent(size=1px) 
    border-right size solid transparent
    border-left size solid transparent

//end -------- Borders  ----

//----------- Arrows  ----
arrow(color=#333, size=8px, dir=bottom, content=false) 
    // valida se vai querer pseudo elemento before ou after
    if content == true
        content ''
        display inline-block
        vertical-align top
        
    if content == middle
        content ''
        display inline-block
        vertical-align middle
        
    if content == bottom
        content ''
        display inline-block
        vertical-align bottom
        
    if content == absolute
        content ''
        position absolute
    
    /* valida a direcao do ponteiro, podendo ser top, bottom, right, left */
    if dir == top 
        border-top size solid color
        border-left size solid transparent
        border-right size solid transparent
    
    else if dir == bottom 
        border-bottom size solid color
        border-left size solid transparent
        border-right size solid transparent
    
    else if dir == right 
        border-top size solid transparent
        border-bottom size solid transparent
        border-right size solid color
    
    else 
        border-top size solid transparent
        border-left size solid color
        border-bottom size solid transparent
    
//end -------- Arrows  ----

//----------- Selection  ----
select(back=#333, color=#f1f1f1) 
    selection 
        background back
        color color
    
    -moz-selection 
        background back
        color color
    selection 
        background back
        color color
    -moz-selection 
        background back
        color color
    selection 
        background back
        color color
    -moz-selection 
        background back
        color color
    
//end -------- Selection  ----


// end Mixins

// ----
